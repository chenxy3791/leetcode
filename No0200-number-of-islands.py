# -*- coding: utf-8 -*-
"""
Created on Fri Apr  8 14:54:12 2022

@author: Dell
"""
from typing import List
from collections import deque

class Solution:
    def numIslands0(self, grid: List[List[str]]) -> int:
        def getNextStart(r0,c0):
            # Find the next land point as the start for the next search
            # from (r0,c0)
            for r in range(r0+1):
                for c in range(c0+1,len(grid[0])):
                    if grid[r][c] == "1":
                        return (r,c)
            for r in range(r0+1,len(grid)):
                for c in range(len(grid[0])):
                    if grid[r][c] == "1":
                        return (r,c)
            return (-1,-1)
        R,C   = len(grid),len(grid[0])
        r0,c0 = -1,-1
        islandCnt = 0
        while True:
            r0,c0 = getNextStart(r0, c0)
            # print(r0,c0)
            if r0==-1:
                return islandCnt
            q = deque()
            q.append((r0,c0))
            while len(q)>0:
                (r,c) = q.popleft()
                grid[r][c] = "0"
                if r-1>=0 and grid[r-1][c] == "1":
                    q.append((r-1,c))
                if r+1<R and grid[r+1][c] == "1":
                    q.append((r+1,c))
                if c-1>=0 and grid[r][c-1] == "1":
                    q.append((r,c-1))
                if c+1<C and grid[r][c+1] == "1":
                    q.append((r,c+1))
            islandCnt += 1

    def numIslands1(self, grid: List[List[str]]) -> int:
        if len(grid)==0 or len(grid[0])==0:
            return 0
        
        R,C       = len(grid),len(grid[0])
        islandCnt = 0
        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c] == "1":
                    # print(grid,r,c)
                    q = deque([(r,c)])
                    grid[r][c] = "0"
                    while len(q)>0:
                        (r0,c0) = q.popleft()
                        for x,y in [(r0-1,c0),(r0+1,c0),(r0,c0-1),(r0,c0+1)]:
                            if 0<=x<R and 0<=y<C and grid[x][y]=="1":
                                q.append((x,y))
                                grid[x][y] = "0"
                    islandCnt += 1
        return islandCnt
                        
if __name__ == '__main__':
    sln = Solution()

    grid = [ ["0"] ]
    print(sln.numIslands0(grid))  
    grid = [ ["0"] ]
    print(sln.numIslands1(grid))  

    grid = [ ["1"] ]
    print(sln.numIslands0(grid))
    grid = [ ["1"] ]
    print(sln.numIslands1(grid))

    grid = [ ["1","1","0","1","0"] ]
    print(sln.numIslands0(grid))
    grid = [ ["1","1","0","1","0"] ]
    print(sln.numIslands1(grid))    
    
    grid = [
      ["1","1","1","1","0"],
      ["1","1","0","1","0"],
      ["1","1","0","0","0"],
      ["0","0","0","0","0"]
    ]
    print(sln.numIslands0(grid))
    grid = [
      ["1","1","1","1","0"],
      ["1","1","0","1","0"],
      ["1","1","0","0","0"],
      ["0","0","0","0","0"]
    ]
    print(sln.numIslands1(grid))        
            
    grid = [
      ["1","1","0","0","0"],
      ["1","1","0","0","0"],
      ["0","0","1","0","0"],
      ["0","0","0","1","1"]
    ]
    print(sln.numIslands0(grid))        
    grid = [
      ["1","1","0","0","0"],
      ["1","1","0","0","0"],
      ["0","0","1","0","0"],
      ["0","0","0","1","1"]
    ]
    print(sln.numIslands1(grid))        

    grid = [["0","1","0"],["1","0","1"],["0","1","0"]]
    print(sln.numIslands0(grid))
    grid = [["0","1","0"],["1","0","1"],["0","1","0"]]
    print(sln.numIslands1(grid))
    
    # grid = [["1","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0"],["1","0","0","1","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0"],["0","0","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","0","1","0"],["0","0","0","1","1","0","0","1","0","0","0","1","1","1","0","0","1","0","0","1"],["0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],["1","0","0","0","0","1","0","1","0","1","1","0","0","0","0","0","0","1","0","1"],["0","0","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1"],["0","0","0","1","0","1","0","0","1","1","0","1","0","1","1","0","1","1","1","0"],["0","0","0","0","1","0","0","1","1","0","0","0","0","1","0","0","0","1","0","1"],["0","0","1","0","0","1","0","0","0","0","0","1","0","0","1","0","0","0","1","0"],["1","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","1","0","1","0"],["0","1","0","0","0","1","0","1","0","1","1","0","1","1","1","0","1","1","0","0"],["1","1","0","1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1"],["0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","0","1","0","0","0"],["0","0","1","1","1","0","0","0","1","1","0","0","0","1","0","1","0","0","0","0"],["1","0","0","1","0","1","0","0","0","0","1","0","0","0","1","0","1","0","1","1"],["1","0","1","0","0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","0"],["0","1","1","0","0","0","1","1","1","0","1","0","1","0","1","1","1","1","0","0"],["0","1","0","0","0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","1"],["0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","1","1","0","0","0"]]
    # print(sln.numIslands0(grid))
    grid = [["1","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0"],["1","0","0","1","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0"],["0","0","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","0","1","0"],["0","0","0","1","1","0","0","1","0","0","0","1","1","1","0","0","1","0","0","1"],["0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],["1","0","0","0","0","1","0","1","0","1","1","0","0","0","0","0","0","1","0","1"],["0","0","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1"],["0","0","0","1","0","1","0","0","1","1","0","1","0","1","1","0","1","1","1","0"],["0","0","0","0","1","0","0","1","1","0","0","0","0","1","0","0","0","1","0","1"],["0","0","1","0","0","1","0","0","0","0","0","1","0","0","1","0","0","0","1","0"],["1","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","1","0","1","0"],["0","1","0","0","0","1","0","1","0","1","1","0","1","1","1","0","1","1","0","0"],["1","1","0","1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1"],["0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","0","1","0","0","0"],["0","0","1","1","1","0","0","0","1","1","0","0","0","1","0","1","0","0","0","0"],["1","0","0","1","0","1","0","0","0","0","1","0","0","0","1","0","1","0","1","1"],["1","0","1","0","0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","0"],["0","1","1","0","0","0","1","1","1","0","1","0","1","0","1","1","1","1","0","0"],["0","1","0","0","0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","1"],["0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","1","1","0","0","0"]]
    print(sln.numIslands1(grid))